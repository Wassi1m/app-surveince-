#!/usr/bin/env python3
"""
Script de g√©n√©ration de donn√©es de d√©monstration
pour le syst√®me de surveillance intelligente
"""
import os
import django
import random
from datetime import datetime, timedelta
from django.utils import timezone

# Configuration Django
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'surveillance_system.settings')
django.setup()


from django.contrib.auth.models import User
from monitoring.models import Location, Zone, Camera, DetectionEvent, VideoRecording
from alerts.models import AlertRule, NotificationChannel, AlertRecipient
from analytics.models import HeatMapData, StatisticsSummary, PerformanceMetric


def create_demo_data():
    """Cr√©e des donn√©es de d√©monstration"""
    print("üöÄ Cr√©ation des donn√©es de d√©monstration...")
    
    # Cr√©er des utilisateurs de d√©monstration
    create_demo_users()
    
    # Cr√©er des lieux et zones
    locations = create_demo_locations()
    
    # Cr√©er des cam√©ras
    cameras = create_demo_cameras(locations)
    
    # Cr√©er des canaux de notification
    channels = create_demo_channels()
    
    # Cr√©er des r√®gles d'alerte
    rules = create_demo_alert_rules(locations)
    
    # Cr√©er des d√©tections simul√©es
    create_demo_detections(cameras)
    
    # Cr√©er des donn√©es de carte de chaleur
    create_demo_heatmap_data(locations)
    
    print("‚úÖ Donn√©es de d√©monstration cr√©√©es avec succ√®s!")
    print("\nüìä R√©sum√©:")
    print(f"- Lieux: {Location.objects.count()}")
    print(f"- Zones: {Zone.objects.count()}")
    print(f"- Cam√©ras: {Camera.objects.count()}")
    print(f"- D√©tections: {DetectionEvent.objects.count()}")
    print(f"- R√®gles d'alerte: {AlertRule.objects.count()}")
    print(f"- Canaux de notification: {NotificationChannel.objects.count()}")
    
    print("\nüîê Comptes de connexion:")
    print("- Admin: admin / admin123")
    print("- S√©curit√©: security / security123")
    print("- Manager: manager / manager123")
    
    print("\nüåê Acc√®s √† l'application:")
    print("- http://127.0.0.1:8000/ (Interface principale)")
    print("- http://127.0.0.1:8000/admin/ (Administration)")


def create_demo_users():
    """Cr√©e des utilisateurs de d√©monstration"""
    users_data = [
        {'username': 'security', 'email': 'security@surveillance.local', 'password': 'security123', 'first_name': 'Agent', 'last_name': 'S√©curit√©'},
        {'username': 'manager', 'email': 'manager@surveillance.local', 'password': 'manager123', 'first_name': 'Manager', 'last_name': 'Surveillance'},
    ]
    
    for user_data in users_data:
        user, created = User.objects.get_or_create(
            username=user_data['username'],
            defaults={
                'email': user_data['email'],
                'first_name': user_data['first_name'],
                'last_name': user_data['last_name'],
                'is_staff': True if user_data['username'] == 'manager' else False,
            }
        )
        if created:
            user.set_password(user_data['password'])
            user.save()
            print(f"üë§ Utilisateur cr√©√©: {user.username}")


def create_demo_locations():
    """Cr√©e des lieux de d√©monstration"""
    locations_data = [
        {
            'name': 'SuperMarch√© Central',
            'address': '123 Rue du Commerce, 75001 Paris',
            'description': 'Supermarch√© de 1500m¬≤ avec 8 rayons principaux',
        },
        {
            'name': 'Entrep√¥t Logistique Nord',
            'address': '45 Zone Industrielle, 95100 Argenteuil',
            'description': 'Entrep√¥t de stockage et distribution de 5000m¬≤',
        },
        {
            'name': 'Boutique Premium Center',
            'address': '78 Avenue des Champs, 75008 Paris',
            'description': 'Boutique de v√™tements haut de gamme 300m¬≤',
        }
    ]
    
    locations = []
    for loc_data in locations_data:
        location, created = Location.objects.get_or_create(
            name=loc_data['name'],
            defaults=loc_data
        )
        if created:
            print(f"üìç Lieu cr√©√©: {location.name}")
            
            # Cr√©er des zones pour ce lieu
            zones_data = get_zones_for_location(location.name)
            for zone_data in zones_data:
                zone, zone_created = Zone.objects.get_or_create(
                    location=location,
                    name=zone_data['name'],
                    defaults=zone_data
                )
                if zone_created:
                    print(f"  üè¢ Zone cr√©√©e: {zone.name} ({zone.risk_level})")
        
        locations.append(location)
    
    return locations


def get_zones_for_location(location_name):
    """Retourne les zones selon le type de lieu"""
    if 'SuperMarch√©' in location_name:
        return [
            {'name': 'Entr√©e Principale', 'risk_level': 'high', 'coordinates': [0, 0, 100, 50], 'description': 'Zone d\'entr√©e et sortie'},
            {'name': 'Caisses', 'risk_level': 'high', 'coordinates': [100, 0, 200, 50], 'description': 'Espace des caisses enregistreuses'},
            {'name': 'Rayon √âlectronique', 'risk_level': 'medium', 'coordinates': [0, 50, 100, 100], 'description': 'Produits √©lectroniques'},
            {'name': 'Rayon Alimentaire', 'risk_level': 'low', 'coordinates': [100, 50, 200, 100], 'description': 'Produits alimentaires'},
            {'name': 'R√©serve', 'risk_level': 'medium', 'coordinates': [200, 0, 300, 100], 'description': 'Zone de stockage'},
        ]
    elif 'Entrep√¥t' in location_name:
        return [
            {'name': 'Quai de Chargement', 'risk_level': 'high', 'coordinates': [0, 0, 150, 50], 'description': 'Zone de chargement des camions'},
            {'name': 'Zone Stockage A', 'risk_level': 'medium', 'coordinates': [0, 50, 75, 150], 'description': 'Stockage produits A'},
            {'name': 'Zone Stockage B', 'risk_level': 'medium', 'coordinates': [75, 50, 150, 150], 'description': 'Stockage produits B'},
            {'name': 'Bureau Administration', 'risk_level': 'low', 'coordinates': [150, 0, 200, 50], 'description': 'Bureaux administratifs'},
        ]
    else:  # Boutique
        return [
            {'name': 'Vitrine', 'risk_level': 'high', 'coordinates': [0, 0, 80, 30], 'description': 'Espace vitrine'},
            {'name': 'Espace Vente', 'risk_level': 'medium', 'coordinates': [0, 30, 80, 80], 'description': 'Zone de vente principale'},
            {'name': 'Caisse', 'risk_level': 'high', 'coordinates': [80, 0, 100, 30], 'description': 'Zone de paiement'},
            {'name': 'R√©serve', 'risk_level': 'low', 'coordinates': [80, 30, 100, 80], 'description': 'Stockage boutique'},
        ]


def create_demo_cameras(locations):
    """Cr√©e des cam√©ras de d√©monstration"""
    cameras = []
    camera_id = 1
    
    for location in locations:
        zones = Zone.objects.filter(location=location)
        
        for i, zone in enumerate(zones):
            camera = Camera.objects.create(
                location=location,
                zone=zone,
                name=f"CAM-{camera_id:02d}-{zone.name.replace(' ', '')}",
                ip_address=f"192.168.1.{100 + camera_id}",
                port=554,
                username="admin",
                password="admin123",
                stream_url=f"rtsp://admin:admin123@192.168.1.{100 + camera_id}:554/stream1",
                status=random.choice(['online', 'online', 'online', 'offline']),  # 75% online
                resolution="1920x1080",
                fps=30,
                is_ai_enabled=True,
                last_seen=timezone.now() - timedelta(minutes=random.randint(0, 30))
            )
            cameras.append(camera)
            camera_id += 1
            print(f"üìπ Cam√©ra cr√©√©e: {camera.name} ({camera.status})")
    
    return cameras


def create_demo_channels():
    """Cr√©e des canaux de notification de d√©monstration"""
    channels_data = [
        {
            'name': 'Email S√©curit√©',
            'channel_type': 'email',
            'configuration': {
                'from_email': 'alerts@surveillance.local',
                'smtp_host': 'smtp.gmail.com',
                'smtp_port': 587
            }
        },
        {
            'name': 'SMS Urgence',
            'channel_type': 'sms',
            'configuration': {
                'api_key': 'demo_api_key',
                'sender': 'SURVEILLANCE'
            }
        },
        {
            'name': 'Webhook Central',
            'channel_type': 'webhook',
            'configuration': {
                'webhook_url': 'https://hooks.example.com/surveillance',
                'headers': {'Authorization': 'Bearer demo_token'}
            }
        },
        {
            'name': 'Slack S√©curit√©',
            'channel_type': 'slack',
            'configuration': {
                'webhook_url': 'https://hooks.slack.com/services/demo',
                'channel': '#surveillance'
            }
        }
    ]
    
    channels = []
    for channel_data in channels_data:
        channel, created = NotificationChannel.objects.get_or_create(
            name=channel_data['name'],
            defaults=channel_data
        )
        if created:
            print(f"üì¢ Canal cr√©√©: {channel.name} ({channel.channel_type})")
        channels.append(channel)
    
    return channels


def create_demo_alert_rules(locations):
    """Cr√©e des r√®gles d'alerte de d√©monstration"""
    admin_user = User.objects.get(username='admin')
    
    rules_data = [
        {
            'name': 'Vol D√©tect√©',
            'description': 'Alerte en cas de d√©tection de vol',
            'trigger_type': 'detection_type',
            'trigger_conditions': {
                'event_types': ['theft'],
                'min_confidence': 0.7
            },
            'priority': 1,
            'cooldown_minutes': 2,
        },
        {
            'name': 'Intrusion Nocturne',
            'description': 'D√©tection d\'intrusion en dehors des heures d\'ouverture',
            'trigger_type': 'time_window',
            'trigger_conditions': {
                'event_types': ['intrusion', 'suspicious'],
                'time_windows': [{'start': 20, 'end': 7}]
            },
            'priority': 1,
            'cooldown_minutes': 5,
        },
        {
            'name': 'Incident S√©curit√©',
            'description': 'Tout incident n√©cessitant une attention',
            'trigger_type': 'severity_level',
            'trigger_conditions': {
                'min_severity': 'high'
            },
            'priority': 2,
            'cooldown_minutes': 10,
        }
    ]
    
    rules = []
    for location in locations:
        for rule_data in rules_data:
            rule = AlertRule.objects.create(
                location=location,
                created_by=admin_user,
                **rule_data
            )
            rules.append(rule)
            print(f"‚ö†Ô∏è  R√®gle cr√©√©e: {rule.name} pour {location.name}")
    
    return rules


def create_demo_detections(cameras):
    """Cr√©e des d√©tections simul√©es"""
    event_types = ['theft', 'intrusion', 'suspicious', 'abandoned_object', 'accident', 'fire', 'crowd', 'violence']
    severity_levels = ['low', 'medium', 'high', 'critical']
    
    # Cr√©er des d√©tections pour les derniers jours
    for days_ago in range(7):
        detection_date = timezone.now() - timedelta(days=days_ago)
        num_detections = random.randint(3, 15)  # 3-15 d√©tections par jour
        
        for _ in range(num_detections):
            camera = random.choice(cameras)
            event_type = random.choice(event_types)
            
            # Ajuster la probabilit√© selon le type de zone
            if camera.zone.risk_level == 'high':
                severity = random.choices(severity_levels, weights=[10, 20, 40, 30])[0]
            elif camera.zone.risk_level == 'medium':
                severity = random.choices(severity_levels, weights=[20, 40, 30, 10])[0]
            else:
                severity = random.choices(severity_levels, weights=[50, 30, 15, 5])[0]
            
            detection_time = detection_date.replace(
                hour=random.randint(6, 22),
                minute=random.randint(0, 59),
                second=random.randint(0, 59)
            )
            
            detection = DetectionEvent.objects.create(
                camera=camera,
                zone=camera.zone,
                event_type=event_type,
                severity=severity,
                confidence=random.uniform(0.6, 0.95),
                detected_at=detection_time,
                bounding_boxes=[{
                    'x': random.randint(50, 200),
                    'y': random.randint(30, 150),
                    'width': random.randint(80, 150),
                    'height': random.randint(100, 200)
                }],
                description=f"D√©tection {event_type} avec {severity} gravit√©",
                is_verified=random.choice([True, False]) if days_ago > 1 else False,
                false_positive=random.choice([True, False, False, False]) if random.choice([True, False]) else False
            )
            
            # D√©clencher les alertes pour cette d√©tection
            if days_ago < 2:  # Seulement pour les d√©tections r√©centes
                try:
                    from alerts.utils import process_detection
                    process_detection(detection)
                except ImportError:
                    pass  # Le module utils n'est peut-√™tre pas encore disponible
    
    print(f"üîç {DetectionEvent.objects.count()} d√©tections cr√©√©es")


def create_demo_heatmap_data(locations):
    """Cr√©e des donn√©es de carte de chaleur"""
    for location in locations:
        zones = Zone.objects.filter(location=location)
        
        # Cr√©er des donn√©es pour les 30 derniers jours
        for days_ago in range(30):
            date = (timezone.now() - timedelta(days=days_ago)).date()
            
            for zone in zones:
                # Calculer les d√©tections pour cette zone ce jour-l√†
                detections_count = DetectionEvent.objects.filter(
                    zone=zone,
                    detected_at__date=date
                ).count()
                
                # Calculer la densit√© d'activit√© bas√©e sur le niveau de risque et les d√©tections
                base_density = {'high': 0.7, 'medium': 0.4, 'low': 0.2}[zone.risk_level]
                activity_density = min(1.0, base_density + (detections_count * 0.05))
                
                # Score de risque calcul√©
                risk_multiplier = {'high': 2.0, 'medium': 1.5, 'low': 1.0}[zone.risk_level]
                risk_score = activity_density * risk_multiplier * random.uniform(0.8, 1.2)
                
                # Heures de pic (simulation)
                peak_hours = []
                if detections_count > 3:
                    peak_hours = random.sample(range(8, 20), min(3, detections_count // 2))
                
                HeatMapData.objects.update_or_create(
                    location=location,
                    zone=zone,
                    date=date,
                    defaults={
                        'detection_count': detections_count,
                        'alert_count': max(0, detections_count - 2),  # Approximation
                        'activity_density': activity_density,
                        'risk_score': min(1.0, risk_score),
                        'peak_hours': peak_hours,
                        'event_types': {
                            'theft': random.randint(0, detections_count // 2),
                            'suspicious': random.randint(0, detections_count // 2),
                            'intrusion': random.randint(0, max(1, detections_count // 4))
                        }
                    }
                )
    
    print(f"üó∫Ô∏è  {HeatMapData.objects.count()} entr√©es de carte de chaleur cr√©√©es")


if __name__ == '__main__':
    try:
        create_demo_data()
    except Exception as e:
        print(f"‚ùå Erreur lors de la cr√©ation des donn√©es: {e}")
        import traceback
        traceback.print_exc() 