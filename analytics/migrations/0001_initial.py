# Generated by Django 5.2.6 on 2025-09-24 09:34

import django.db.models.deletion
import django.utils.timezone
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('monitoring', '0001_initial'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='PerformanceMetric',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('metric_type', models.CharField(choices=[('detection_latency', 'Latence de détection'), ('alert_response_time', 'Temps de réponse aux alertes'), ('camera_uptime', 'Disponibilité des caméras'), ('ai_accuracy', "Précision de l'IA"), ('storage_usage', 'Utilisation du stockage'), ('bandwidth_usage', 'Utilisation de la bande passante'), ('cpu_usage', 'Utilisation CPU'), ('memory_usage', 'Utilisation mémoire')], max_length=30)),
                ('value', models.FloatField()),
                ('unit', models.CharField(help_text='Unité de mesure', max_length=50)),
                ('timestamp', models.DateTimeField(default=django.utils.timezone.now)),
                ('threshold_min', models.FloatField(blank=True, null=True)),
                ('threshold_max', models.FloatField(blank=True, null=True)),
                ('is_alert_triggered', models.BooleanField(default=False)),
                ('metadata', models.JSONField(default=dict)),
                ('camera', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='performance_metrics', to='monitoring.camera')),
                ('location', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='performance_metrics', to='monitoring.location')),
            ],
            options={
                'verbose_name': 'Métrique de performance',
                'verbose_name_plural': 'Métriques de performance',
                'ordering': ['-timestamp'],
            },
        ),
        migrations.CreateModel(
            name='Report',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=200, verbose_name='Titre du rapport')),
                ('report_type', models.CharField(choices=[('daily', 'Rapport quotidien'), ('weekly', 'Rapport hebdomadaire'), ('monthly', 'Rapport mensuel'), ('incident', "Rapport d'incident"), ('security_audit', 'Audit de sécurité'), ('performance', 'Rapport de performance'), ('custom', 'Rapport personnalisé')], max_length=20)),
                ('period_start', models.DateTimeField()),
                ('period_end', models.DateTimeField()),
                ('status', models.CharField(choices=[('pending', 'En attente'), ('generating', 'Génération en cours'), ('completed', 'Terminé'), ('failed', 'Échec'), ('archived', 'Archivé')], default='pending', max_length=15)),
                ('file_path', models.CharField(blank=True, max_length=500)),
                ('file_size', models.BigIntegerField(blank=True, null=True)),
                ('content', models.JSONField(default=dict, help_text='Contenu structuré du rapport')),
                ('summary', models.TextField(blank=True, verbose_name='Résumé exécutif')),
                ('recommendations', models.TextField(blank=True, verbose_name='Recommandations')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('completed_at', models.DateTimeField(blank=True, null=True)),
                ('is_automatic', models.BooleanField(default=False)),
                ('is_public', models.BooleanField(default=False)),
                ('download_count', models.PositiveIntegerField(default=0)),
                ('generated_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
                ('location', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='reports', to='monitoring.location')),
                ('shared_with', models.ManyToManyField(blank=True, related_name='shared_reports', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Rapport',
                'verbose_name_plural': 'Rapports',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='TrendAnalysis',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('trend_type', models.CharField(choices=[('detection_frequency', 'Fréquence des détections'), ('incident_severity', 'Gravité des incidents'), ('response_times', 'Temps de réponse'), ('zone_activity', 'Activité par zone'), ('temporal_patterns', 'Motifs temporels'), ('seasonal_trends', 'Tendances saisonnières')], max_length=30)),
                ('analysis_period_start', models.DateTimeField()),
                ('analysis_period_end', models.DateTimeField()),
                ('trend_direction', models.CharField(choices=[('increasing', 'Croissante'), ('decreasing', 'Décroissante'), ('stable', 'Stable'), ('volatile', 'Volatile')], max_length=20)),
                ('trend_strength', models.FloatField(help_text='Force de la tendance (0.0-1.0)')),
                ('correlation_coefficient', models.FloatField(blank=True, null=True)),
                ('data_points', models.JSONField(help_text='Points de données pour la visualisation')),
                ('statistical_summary', models.JSONField(help_text='Résumé statistique')),
                ('predictions', models.JSONField(default=dict, help_text='Prédictions futures')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('algorithm_used', models.CharField(blank=True, max_length=100)),
                ('confidence_level', models.FloatField(default=0.95)),
                ('location', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='trend_analyses', to='monitoring.location')),
            ],
            options={
                'verbose_name': 'Analyse de tendance',
                'verbose_name_plural': 'Analyses de tendance',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='HeatMapData',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateField()),
                ('detection_count', models.PositiveIntegerField(default=0)),
                ('alert_count', models.PositiveIntegerField(default=0)),
                ('incident_count', models.PositiveIntegerField(default=0)),
                ('activity_density', models.FloatField(default=0.0, help_text="Densité d'activité (0.0-1.0)")),
                ('risk_score', models.FloatField(default=0.0, help_text='Score de risque calculé')),
                ('peak_hours', models.JSONField(default=list, help_text="Heures de pic d'activité")),
                ('event_types', models.JSONField(default=dict, help_text="Distribution des types d'événements")),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('location', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='heatmap_data', to='monitoring.location')),
                ('zone', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='heatmap_data', to='monitoring.zone')),
            ],
            options={
                'verbose_name': 'Données de carte de chaleur',
                'verbose_name_plural': 'Données de cartes de chaleur',
                'ordering': ['-date'],
                'unique_together': {('zone', 'date')},
            },
        ),
        migrations.CreateModel(
            name='StatisticsSummary',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('period_type', models.CharField(choices=[('hour', 'Heure'), ('day', 'Jour'), ('week', 'Semaine'), ('month', 'Mois'), ('quarter', 'Trimestre'), ('year', 'Année')], max_length=10)),
                ('period_start', models.DateTimeField()),
                ('period_end', models.DateTimeField()),
                ('total_detections', models.PositiveIntegerField(default=0)),
                ('theft_detections', models.PositiveIntegerField(default=0)),
                ('intrusion_detections', models.PositiveIntegerField(default=0)),
                ('suspicious_detections', models.PositiveIntegerField(default=0)),
                ('accident_detections', models.PositiveIntegerField(default=0)),
                ('fire_detections', models.PositiveIntegerField(default=0)),
                ('other_detections', models.PositiveIntegerField(default=0)),
                ('total_alerts', models.PositiveIntegerField(default=0)),
                ('critical_alerts', models.PositiveIntegerField(default=0)),
                ('high_alerts', models.PositiveIntegerField(default=0)),
                ('medium_alerts', models.PositiveIntegerField(default=0)),
                ('low_alerts', models.PositiveIntegerField(default=0)),
                ('false_positives', models.PositiveIntegerField(default=0)),
                ('true_positives', models.PositiveIntegerField(default=0)),
                ('average_response_time', models.FloatField(blank=True, help_text='Temps de réponse moyen en secondes', null=True)),
                ('camera_uptime_percentage', models.FloatField(default=100.0)),
                ('peak_activity_hour', models.PositiveIntegerField(blank=True, null=True)),
                ('activity_distribution', models.JSONField(default=dict, help_text="Distribution de l'activité par heure")),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('location', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='statistics', to='monitoring.location')),
            ],
            options={
                'verbose_name': 'Résumé statistique',
                'verbose_name_plural': 'Résumés statistiques',
                'ordering': ['-period_start'],
                'unique_together': {('location', 'period_type', 'period_start')},
            },
        ),
    ]
